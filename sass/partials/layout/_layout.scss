@use './../abstracts/scale' as *;
// This is based off Andy Bells Every-Layout

// The center for centering content horizontally within its parent.
.center {
    box-sizing: content-box;
    margin-inline: auto;
    max-inline-size: var(--measure);
    padding-inline: var(--padding-inline, var(--s1));

    &[data-center-type='intrinsic'] {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
}

// The stack for vertically spacing content.

.stack {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;

    & > * + * {
        margin-block-start: var(--space, var(--s1));
    }
    //take up all the vertical space if stack is the only child.
    &:only-child {
        block-size: 100%;
    }
    & > .split-after {
        margin-block-end: auto;
    }

    &[data-stack-type='large'] > * + * {
        margin-block-start: calc(var(--space, var(--s1)) * $ratio);
    }

    &[data-stack-type='small'] > * + * {
        margin-block-start: calc(var(--space, var(--s1)) / $ratio);
    }
}

// The box, visually show you that something is in a box, and inherit colors to children for styling
// transparent outline is for high contrast OS themes.
// You need to come back and think about how you want to implement this, eg colors, border, etc.
.box {
    padding: var(--s1);
    border-radius: var(--border-radius);

    outline: 0.125rem solid transparent;
    outline-offset: -0.125rem;

    & * {
        color: inherit;
    }
    & .no-clr-inherit {
        color: initial;
    }
}

// "Cluster components suit any groups of elements that differ in length and are liable to wrap. Buttons that appear together at the end of forms are ideal candidates, as well as lists of tags, keywords, or other meta information. Use the Cluster to align any groups of horizontally laid out elements to the left or right, or in the center.

// By applying justify-content: space-between and align-items: center you can even set out your page headerâ€™s logo and navigation. This will wrap naturally, and without the need for an @media breakpoint:"
.cluster {
    display: flex;
    flex-wrap: wrap;
    gap: var(--s1);
    justify-content: var(--justify, flex-start);
    align-items: center;
}

// The sidebar is for exactly that. A side bar. The two elements are adjacent when there is room for them, and they are stacked when there is not. The wrapping occurs at min-inline-size on not-sidebar.
// with side-bar should have two children, and the 'side' property defaults to 'left'.
.with-sidebar {
    display: flex;
    flex-wrap: wrap;
    gap: var(--gap, var(--s1));
    &[data-sidebar-type='reverse'] {
        flex-wrap: wrap-reverse;
    }
    & > .sidebar {
        flex-basis: var(--size, 20rem);
        flex-grow: 1;
    }
    & > .not-sidebar {
        flex-basis: 0;
        flex-grow: 999;
        min-inline-size: var(--min-size, 50%);
    }
}

// "There are any number of situations in which you might want to switch directly between a horizontal and vertical layout. But it is especially useful where each element should be considered equal, or part of a continuum. Card components advertising products should share the same width no matter the orientation, otherwise one or more cards could be perceived as highlighted or featured in some way.

// A set of numbered steps is also easier on cognition if those steps are laid out along one horizontal or vertical line."

.switcher {
    display: flex;
    flex-wrap: wrap;
    gap: var(--gap, var(--s1));
    & > * {
        flex-grow: 1;
        flex-basis: calc((var(--threshold, 30rem) - 100%) * 999);
    }
}

// USE THIS TO SWITCH WHEN THERE ARE MORE THAN 5 CHILDREN
//   .switcher > :nth-last-child(n+ 5),
//   .switcher > :nth-last-child(n+ 5) ~ * {
//     flex-basis: 100%;
//   }

// The cover is used to center content vertically. It may have headers and footers, and could be used in combination with The Center to get content centered horizontally as well.

.cover {
    display: flex;
    flex-direction: column;
    min-block-size: var(--min-size, 100vh);
    padding: var(--s1);

    & > * {
        margin-block: var(--s1);
    }
    & > .centered {
        margin-block: auto;
    }
    & > :first-child:not(.centered) {
        margin-block-start: 0;
    }
    & > :last-child:not(.centered) {
        margin-block-end: 0;
    }
}

// The grid... A responsive grid.
.grid {
    display: grid;
    gap: var(--gap, var(--s1));
    grid-template-columns: repeat(auto-fit, minmax(min(var(--min-size, 350px), 100%), 1fr));
    &[data-grid-type='fill'] {
        grid-template-columns: repeat(auto-fill, minmax(min(var(--min-size, 350px), 100%), 1fr));
    }
    // min-width set to 0, otherwise the reel breaks the grid layout at small scales and prevents wrapping.
    & > * {
        min-width: 0;
    }
}

// The frame. Mostly used for cropping images / video to a specific aspect ratio, although can be used to crop any html.
// Since inline content wraps, a specific set width might be needed to cause cropping on the left and right. To make sure the cropping happens in all contexts, and at all zoom levels, a %-based value will work. Can accept width, height attributes to change the aspect ratio, but the default is w=16, h=9;
// Can also add a media query orientation portrait to change aspect ratio for phones.

.frame {
    aspect-ratio: var(--aspect-width, 16) / var(--aspect-height, 9);
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
}

.frame > img,
.frame > video {
    inline-size: 100%;
    block-size: 100%;
    object-fit: cover;
}

@media (orientation: portrait) {
    .frame {
        aspect-ratio: 1 / 1;
    }
}

// The Reel. Used for horizontal scrolling, e.g. images, netflix style scrolling through items, etc.
// You need to customize colours.
.reel {
    display: flex;
    block-size: auto;
    overflow-x: auto;
    overflow-y: hidden;
    scrollbar-color: #fff #000;
}

.reel::-webkit-scrollbar {
    block-size: 1rem;
}

.reel::-webkit-scrollbar-track {
    background-color: #000;
}

.reel::-webkit-scrollbar-thumb {
    background-color: #000;
    background-image: linear-gradient(0, #000 0.25rem, #fff 0.25rem, #fff 0.75rem, #000 0.75rem);
}

.reel > * {
    flex: 0 0 auto;
}

.reel > img {
    block-size: 100%;
    flex-basis: auto;
    width: auto;
}

.reel > * + * {
    margin-inline-start: 1rem;
}

// if overflowing, you need the overflowing class to add padding for the scroll bar
.reel.overflowing {
    padding-block-end: 1rem;
}

//Here is the javascript to look for overflowing:
//   (function() {
//     const className = 'reel';
//     const reels = Array.from(document.querySelectorAll(`.${className}`));
//     const toggleOverflowClass = elem => {
//       elem.classList.toggle('overflowing', elem.scrollWidth > elem.clientWidth);
//     };

//     for (let reel of reels) {
//       if ('ResizeObserver' in window) {
//         new ResizeObserver(entries => {
//           toggleOverflowClass(entries[0].target);
//         }).observe(reel);
//       }

//       if ('MutationObserver' in window) {
//         new MutationObserver(entries => {
//           toggleOverflowClass(entries[0].target);
//         }).observe(reel, {childList: true});
//       }
//     }
//   })();

//The icon: square icon for use within text (svg icons in links and buttons, etc).
// fallback to 0.75em square. At the time of writting, cap is only supported in firefox.
.icon {
    inline-size: 0.75em;
    inline-size: 1cap;
    block-size: 0.75em;
    block-size: 1cap;
}
.with-icon {
    display: inline-flex;
    align-items: baseline;
}

.with-icon .icon {
    margin-inline-end: var(--space, var(--s0));
}

// The imposter, used to position content absolutely over its parent. E.g. to delibrately obscure content that isnt available yet.
// I don't see myself having a need for this. I would just use a dialog element.
// .imposter {
//     position: absolute;
//     inset-block-start: 50%;
//     inset-inline-start: 50%;
//     transform: translate(-50%, -50%);
//   }

//   .imposter.contain {
//     --margin: 0px;
//     overflow: auto;
//     max-inline-size: calc(100% - (var(--margin) * 2));
//     max-block-size: calc(100% - (var(--margin) * 2));
//   }
